{"version":3,"file":"static/js/744.00d2f844.chunk.js","mappings":"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","sources":["api/movie/index.ts","pages/details/components/IsFavorite.tsx","pages/details/components/About.tsx","pages/details/index.tsx"],"sourcesContent":["import { api } from '..';\r\nimport {\r\n  TMoviesResponseData,\r\n  IMoviesTransformResponse,\r\n  TPossibleValuesForFiltersResponse,\r\n} from './type';\r\n\r\nexport const movieApi = api.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    getMovies: build.query({\r\n      query: (params) => ({\r\n        url: !!params ? `/v1.4/movie?${params}` : '/v1.4/movie',\r\n        method: 'GET',\r\n      }),\r\n      transformResponse: (\r\n        response: TMoviesResponseData\r\n      ): IMoviesTransformResponse => {\r\n        const moviesList = [];\r\n        for (const m of response.docs) {\r\n          moviesList.push({\r\n            id: m.id,\r\n            name: m.name || m.alternativeName || 'название отсутствует',\r\n            posterUrl: m.poster?.url || null,\r\n            rating: m.rating.imdb,\r\n            year: m.year,\r\n            countries: m.countries,\r\n          });\r\n        }\r\n        return {\r\n          moviesList,\r\n          limit: response.limit,\r\n          page: response.page,\r\n          pages: response.pages,\r\n          total: response.total,\r\n        };\r\n      },\r\n    }),\r\n    getMoviesWithSearch: build.query({\r\n      query: (params) => ({\r\n        url: !!params ? `/v1.4/movie/search?${params}` : '/v1.4/movie/search',\r\n        method: 'GET',\r\n      }),\r\n      transformResponse: (\r\n        response: TMoviesResponseData\r\n      ): IMoviesTransformResponse => {\r\n        const moviesList = [];\r\n        for (const m of response.docs) {\r\n          moviesList.push({\r\n            id: m.id,\r\n            name: m.name || m.alternativeName || 'название отсутствует',\r\n            posterUrl: m.poster?.url || null,\r\n            rating: m.rating.imdb,\r\n            year: m.year,\r\n            countries: m.countries,\r\n          });\r\n        }\r\n        return {\r\n          moviesList,\r\n          limit: response.limit,\r\n          page: response.page,\r\n          pages: response.pages,\r\n          total: response.total,\r\n        };\r\n      },\r\n    }),\r\n    getPossibleValuesForFilters: build.query<\r\n      TPossibleValuesForFiltersResponse[],\r\n      string\r\n    >({\r\n      query: (params) => ({\r\n        url: !!params\r\n          ? `/v1/movie/possible-values-by-field?${params}`\r\n          : '/v1/movie/possible-values-by-field',\r\n        method: 'GET',\r\n      }),\r\n    }),\r\n    getMovieById: build.query<any, string>({\r\n      query: (id) => ({\r\n        url: `/v1.4/movie/${id}`,\r\n        method: 'GET',\r\n      }),\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetMoviesQuery,\r\n  useGetMoviesWithSearchQuery,\r\n  useGetPossibleValuesForFiltersQuery,\r\n  useGetMovieByIdQuery,\r\n} = movieApi;\r\n","import React from 'react';\r\nimport { TIsFavorite } from '../type';\r\nimport { useAppSelector } from 'utils/hooks/useRedux';\r\nimport Like from 'components/like';\r\n\r\nconst IsFavorite: React.FC<TIsFavorite> = ({ movieInfo }) => {\r\n  const user = useAppSelector((state) => state.user.user?.login);\r\n  const movies = useAppSelector((state) =>\r\n    user ? state.favorite.movies[user] : null\r\n  );\r\n  const isFavorite = movies?.find((i) => i.id === movieInfo.id);\r\n  return (\r\n    <>\r\n      <div className=\"absolute top-5 flex justify-center gap-4 h-8\">\r\n        <div\r\n          className={`w-8 h-8 cursor-pointer flex ${\r\n            isFavorite ? '' : 'opacity-65 hover:opacity-100'\r\n          }`}\r\n        >\r\n          <Like\r\n            movieInfo={movieInfo}\r\n          />\r\n        </div>\r\n        {isFavorite ? (\r\n          <h6\r\n            className={`text-nowrap text-lg font-medium border rounded px-2\r\n          text-[#C40C0E] border-[#C40C0E]`}\r\n          >\r\n            в избранном\r\n          </h6>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IsFavorite;\r\n","import { useGetMovieByIdQuery } from 'api/movie';\r\nimport LabelRating from 'components/labelRating';\r\nimport PosterPlug from 'components/posterPlug';\r\nimport React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport IsFavorite from './IsFavorite';\r\nimport Loader from 'components/loader';\r\n\r\nconst About: React.FC = () => {\r\n  const { id = '' } = useParams();\r\n\r\n  const { data, isLoading, isError } = useGetMovieByIdQuery(id, {\r\n    skip: !id,\r\n  });\r\n  // console.log(data);\r\n\r\n  const name = data?.name ?? data?.alternativeName ?? 'Название не указано';\r\n  const poster = data?.poster?.url\r\n    ? {\r\n        backgroundImage: `url(${data.poster.url})`,\r\n        backgroundSize: 'cover',\r\n      }\r\n    : {};\r\n  const rating = data?.rating?.imdb || '0';\r\n  const description = data?.description || '';\r\n  const shortDescription = data?.shortDescription || '';\r\n  const persons = data?.persons\r\n    ? data.persons.length <= 5\r\n      ? data?.persons\r\n      : data?.persons.slice(0, 5)\r\n    : null;\r\n\r\n  //TODO добавить еще инфо о фильме\r\n  return (\r\n    <>\r\n      {!isError&&!isLoading && !!data && (\r\n        <div\r\n          className={`grid grid-rows-1 grid-cols-[320px_1fr]\r\n                      xl:grid-cols-[320px_1fr_1fr] gap-3`}\r\n        >\r\n          <div className=\"flex flex-col h-full\">\r\n            <h2 className=\"my-3 text-2xl font-bold text-amber-600 dark:text-amber-500\">\r\n              {name}\r\n            </h2>\r\n            {data?.countries &&\r\n              data.countries.map((c: { name: string }, i: number) => (\r\n                <span\r\n                  key={c.name}\r\n                  className=\"text-lg\"\r\n                >\r\n                  {c.name}\r\n                  {', '}\r\n                  {data?.year ?? 'год не указан'}\r\n                </span>\r\n              ))}\r\n            <div\r\n              style={poster}\r\n              className={`w-60 h-80 xl:w-80 xl:h-[30rem]\r\n                my-3 relative rounded bg-gradient-to-b\r\n              from-amber-500 to-lime-500 dark:from-amber-600 dark:to-lime-600`}\r\n            >\r\n              {!poster && <PosterPlug />}\r\n              <div className=\"absolute right-1 top-2/3\">\r\n                <LabelRating rating={rating} />\r\n              </div>\r\n            </div>\r\n            <p className=\"text-sm text-justify\">{shortDescription}</p>\r\n            {!!persons && !!persons.length && (\r\n              <div className=\"mt-2 text-xs\">\r\n                <b>В ролях: </b>\r\n                {persons.map(\r\n                  (\r\n                    p: { name: string; enName: string; id: number },\r\n                    i: number\r\n                  ) => (\r\n                    <span key={p.id}>\r\n                      {p.name ?? p.enName}\r\n                      {i < persons.length - 1 ? ', ' : '.'}\r\n                    </span>\r\n                  )\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"relative\">\r\n            <IsFavorite\r\n              movieInfo={{\r\n                id: data.id,\r\n                name:\r\n                  data.name || data.alternativeName || 'название отсутствует',\r\n                posterUrl: data.poster?.url || null,\r\n                rating: data?.rating?.imdb ?? 0,\r\n                year: data?.year,\r\n                countries: data?.countries,\r\n              }}\r\n            />\r\n            <p className=\"mt-24 text-justify\">{description}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {isLoading && (\r\n        <div\r\n          style={{ height: `calc(100vh - 350px)` }}\r\n          className=\"flex items-center justify-center\"\r\n        >\r\n          <Loader />\r\n        </div>\r\n      )}\r\n       {isError && (\r\n        <div\r\n          style={{ height: `calc(100vh - 350px)` }}\r\n          className=\"flex items-center justify-center\"\r\n        >\r\n          <p className='text-2xl text-amber-600'>Ошибка получения данных по фильму с id {id}</p>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import { useParams } from 'react-router-dom';\r\nimport About from './components/About';\r\nimport NotFoundPlug from 'components/notFoundPlug';\r\n\r\nconst PageDetails: React.FC = () => {\r\n  const { id = '' } = useParams();\r\n  const isIdAllNumbers = id.match(/^\\d+$/);\r\n\r\n  return (\r\n    <section className=\"flex flex-col w-5/6 mx-auto row-start-2\">\r\n      {isIdAllNumbers ? (\r\n        <About />\r\n      ) : (\r\n        <div className=\"flex flex-col w-full h-full items-center justify-center\">\r\n          <NotFoundPlug notificationMsg={`фильм с id ${id} не существует`} />\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PageDetails;\r\n"],"names":["movieApi","api","injectEndpoints","endpoints","build","getMovies","query","params","url","method","transformResponse","response","moviesList","m","docs","_m$poster","push","id","name","alternativeName","posterUrl","poster","rating","imdb","year","countries","limit","page","pages","total","getMoviesWithSearch","_m$poster2","getPossibleValuesForFilters","getMovieById","useGetMoviesQuery","useGetMoviesWithSearchQuery","useGetPossibleValuesForFiltersQuery","useGetMovieByIdQuery","_ref","movieInfo","user","useAppSelector","state","_state$user$user","login","movies","favorite","isFavorite","find","i","_jsx","_Fragment","children","_jsxs","className","Like","About","_data$name","_data$poster","_data$rating","_data$poster2","_data$rating$imdb","_data$rating2","useParams","data","isLoading","isError","skip","backgroundImage","backgroundSize","description","shortDescription","persons","length","slice","map","c","_data$year","style","PosterPlug","LabelRating","p","_p$name","enName","IsFavorite","height","Loader","PageDetails","isIdAllNumbers","match","NotFoundPlug","notificationMsg"],"sourceRoot":""}