{"version":3,"file":"static/js/533.b8743dde.chunk.js","mappings":"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","sources":["pages/authorization/form/FormFields.tsx","constants/validation/yupAuth.ts","components/button/index.tsx","pages/authorization/form/ShowInfo.tsx","pages/authorization/form/index.tsx","components/meowingCat/index.tsx","pages/authorization/index.tsx"],"sourcesContent":["import { Field, useFormikContext } from 'formik';\r\nimport React, { Fragment } from 'react';\r\nimport { TAuthFormProps } from './type';\r\nimport { AUTH_FORM_FIELDS } from 'constants/enums';\r\nimport { TAuthField } from 'types/authField';\r\nimport { useAppSelector } from 'utils/hooks/useRedux';\r\n\r\nconst FormFields: React.FC<TAuthFormProps> = ({ path }) => {\r\n  const { errors, touched } = useFormikContext();\r\n  const user = useAppSelector((state) => state.user.user);\r\n\r\n  const styleLabel = `mt-3 text-lg font-bold text-amber-500 dark:text-amber-600`;\r\n  // TODO в мозилле цвет фона иной, как сбросить? appearance-none не работает\r\n  const styleField = `h-9 mt-1 px-2 text-xl rounded-md border-collapse\r\n                bg-slate-200 dark:bg-slate-950\r\n                text-slate-950 dark:text-slate-50\r\n                outline-none appearance-none !important\r\n                focus-visible:border border-amber-500 dark:border-amber-600`;\r\n  const styleErrorsMsg = 'text-sm text-red-500';\r\n\r\n  const fields = (field: TAuthField) => (\r\n    <Fragment key={field.id}>\r\n      <label\r\n        htmlFor={field.id}\r\n        className={styleLabel}\r\n      >\r\n        {field.name}\r\n      </label>\r\n      <Field\r\n        id={field.id}\r\n        name={field.id}\r\n        type={field.id.toLowerCase().includes('password') ? 'password' : 'text'}\r\n        className={\r\n          !!user ? `${styleField} opacity-50 cursor-not-allowed` : styleField\r\n        }\r\n      />\r\n      {errors?.[field.id as keyof typeof errors] &&\r\n        touched[field.id as keyof typeof touched] && (\r\n          <div className={styleErrorsMsg}>\r\n            {errors[field.id as keyof typeof errors]}\r\n          </div>\r\n        )}\r\n    </Fragment>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {AUTH_FORM_FIELDS.map((field) =>\r\n        path === '/login' ? field.isLogIn && fields(field) : fields(field)\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormFields;\r\n","import * as Yup from 'yup';\r\n\r\nconst regex = /^[0-9A-Za-z]+$/;\r\n\r\nexport const YUP_VALIDATION_LOGIN = {\r\n  login: Yup.string()\r\n    .required('поле обязательно к заполнению')\r\n    .min(5, 'логин не менее 5-ти символов')\r\n    .max(15, 'логин не более 15-ти символов')\r\n    .matches(regex, 'только цифры и латинские буквы'),\r\n  password: Yup.string()\r\n    .required('пароль обязателен')\r\n    .min(8, 'минимальная длина пароля - 8 символов')\r\n    .matches(regex, 'только цифры и латинские буквы'),\r\n};\r\n\r\nexport const YUP_VALIDATION_SIGNUP = {\r\n  ...YUP_VALIDATION_LOGIN,\r\n  name: Yup.string()\r\n    .required('пожалуйста, представьтесь')\r\n    .min(3, 'имя не может быть короче 3-х символов')\r\n    .max(25, 'имя не более 25-ти символов'),\r\n    repeatPassword: Yup.string().oneOf(\r\n    [Yup.ref('password')],\r\n    'Пароли не совпадают'\r\n  ),\r\n};\r\n","import React from 'react';\r\nimport { TButton } from './type';\r\n\r\nconst Button: React.FC<TButton> = ({ type, func, size, name, className }) => {\r\n  let style;\r\n  switch (size) {\r\n    /** 'sm' и 'lg' сделано для примера, доработать в случае необходимости */\r\n    case 'sm':\r\n      style = 'h-6 w-10';\r\n      break;\r\n    case 'md':\r\n      style = 'h-10 min-w-36 max-w-max px-2';\r\n      break;\r\n    case 'lg':\r\n      style = 'h-12 w-52';\r\n      break;\r\n  }\r\n  const onClick = !!func ? () => func() : undefined;\r\n  return (\r\n    <button\r\n      type={type}\r\n      className={className ? `${className} ${style}` : style}\r\n      onClick={onClick}\r\n    >\r\n      <span className=\"uppercase\">{name}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import Modal from 'components/modal';\r\nimport React from 'react';\r\nimport { TShowInfo } from './type';\r\nimport Button from 'components/button';\r\nimport {  useNavigate } from 'react-router-dom';\r\n\r\nconst ShowInfo: React.FC<TShowInfo> = ({ setIsModal, info }) => {\r\n  const navigate = useNavigate();\r\n\r\n  let child;\r\n  const childPStyle = 'text-center';\r\n  const childSpanStyle = `underline cursor-pointer\r\n                        text-amber-600 dark:text-amber-700\r\n                        hover:text-amber-500 hover:dark:text-amber-400`\r\n\r\n  switch (info) {\r\n    case 'noUserExist':\r\n      child = (\r\n        <p className={childPStyle}>\r\n          Tакой пользователь не найден,{' '}\r\n          <span\r\n            onClick={() => {\r\n              setIsModal(false);\r\n              navigate('/signup');\r\n            }}\r\n            className={childSpanStyle}\r\n          >\r\n            зарегистрируемся?\r\n          </span>\r\n        </p>\r\n      );\r\n      break;\r\n    case 'wrongPassword':\r\n      child = <p className={childPStyle}>Пароль не подходит :-(</p>;\r\n      break;\r\n    case 'userAlreadyExists':\r\n      child = (\r\n        <p className={childPStyle}>\r\n          Этот пользователь уже существует, попробуйте{' '}\r\n          <span\r\n            onClick={() => {\r\n              setIsModal(false);\r\n              navigate('/login');\r\n            }}\r\n            className={childSpanStyle}\r\n          >\r\n            войти.\r\n          </span>\r\n        </p>\r\n      );\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      children={\r\n        <div className=\"flex flex-col w-96 h-44 justify-between text-xl\">\r\n          {child}\r\n          <Button\r\n            type={'button'}\r\n            size={'md'}\r\n            name={'Ок!'}\r\n            func={() => setIsModal(false)}\r\n            className={`text-center self-center \r\n                bg-amber-600 dark:bg-amber-700\r\n                text-lg rounded-sm font-bold`}\r\n          />\r\n        </div>\r\n      }\r\n      onClose={() => setIsModal(false)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ShowInfo;\r\n","import * as Yup from 'yup';\r\nimport { Formik, Form } from 'formik';\r\nimport {\r\n  TAuthFormProps,\r\n  TAuthFormValues,\r\n  TAuthConditional,\r\n  TAuthRegFormValues,\r\n  TNotifications,\r\n} from './type';\r\nimport { forwardRef, Ref, useState } from 'react';\r\nimport { FormikProps } from 'formik';\r\nimport FormFields from './FormFields';\r\nimport {\r\n  YUP_VALIDATION_LOGIN,\r\n  YUP_VALIDATION_SIGNUP,\r\n} from 'constants/validation/yupAuth';\r\nimport Button from 'components/button';\r\nimport { useAppDispatch, useAppSelector } from 'utils/hooks/useRedux';\r\nimport { setActiveUser, addUser } from 'store/userSlice';\r\nimport { TUser } from 'types/user';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ShowInfo from './ShowInfo';\r\n\r\n\r\nconst AuthForm = forwardRef(\r\n  (\r\n    { path }: TAuthFormProps,\r\n    ref: Ref<\r\n      FormikProps<TAuthConditional<TAuthFormValues | TAuthRegFormValues>>\r\n    >\r\n  ) => {\r\n    const dispatch = useAppDispatch();\r\n    const users = useAppSelector((state) => state.user.users);\r\n    const user = useAppSelector((state) => state.user.user);\r\n    const navigate = useNavigate();\r\n    const [isModal, setIsModal] = useState<boolean>(false);\r\n    const [isModalInfo, setIsModalInfo] = useState<TNotifications>(null);\r\n\r\n    const initialValues: TAuthConditional<\r\n      TAuthFormValues | TAuthRegFormValues\r\n    > =\r\n      path === '/login'\r\n        ? { login: '', password: '' }\r\n        : { login: '', password: '', name: '', repeatPassword: '' };\r\n\r\n    const validationSchema = Yup.object().shape(\r\n      path === '/login' ? YUP_VALIDATION_LOGIN : YUP_VALIDATION_SIGNUP\r\n    );\r\n\r\n    return (\r\n      <Formik\r\n        innerRef={ref}\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n          if (path === '/signup') {\r\n            const isExist = users.some((u) => u.login === values.login);\r\n            if (isExist) {\r\n              setIsModal(true);\r\n              setIsModalInfo('userAlreadyExists');\r\n              return;\r\n            } else {\r\n              const newUser: TUser = {\r\n                // @ts-ignore\r\n                name: values.name,\r\n                login: values.login,\r\n                password: values.password,\r\n              };\r\n              dispatch(setActiveUser(newUser));\r\n              dispatch(addUser(newUser));\r\n              actions.resetForm();\r\n              navigate('/');\r\n            }\r\n          }\r\n          if (path === '/login') {\r\n            const existingUser = users.find((u) => u.login === values.login);\r\n            if (!existingUser) {\r\n              setIsModal(true);\r\n              setIsModalInfo('noUserExist');\r\n              return;\r\n            } else {\r\n              const matchPassword = existingUser.password === values.password;\r\n              if (matchPassword) {\r\n                dispatch(setActiveUser(existingUser));\r\n                actions.resetForm();\r\n                navigate('/');\r\n              } else {\r\n                setIsModal(true);\r\n                setIsModalInfo('wrongPassword');\r\n              }\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {() => (\r\n          <Form className=\"w-1/3 mx-auto mt-5\">\r\n            <fieldset disabled={!!user}>\r\n              <div className=\"flex flex-col gap-y-1\">\r\n                <FormFields path={path} />\r\n              </div>\r\n              <div className=\"flex justify-center mt-6\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  size={'md'}\r\n                  className={`rounded-md text-xl\r\n                  bg-lime-400 dark:bg-lime-600\r\n                  ${\r\n                    !!user\r\n                      ? 'opacity-50 cursor-not-allowed'\r\n                      : 'hover:bg-lime-500 hover:dark:bg-lime-500'\r\n                  }\r\n                  `}\r\n                  name={path === '/login' ? 'войти' : 'зарегистрироваться'}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            {isModal && (\r\n              <ShowInfo\r\n                setIsModal={setIsModal}\r\n                info={isModalInfo}\r\n              />\r\n            )}\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AuthForm;\r\n","import React, { useContext } from 'react';\r\nimport meowing from 'assets/images/meowing.gif';\r\nimport { ShowCatContext } from 'store/context';\r\n\r\nconst MeowingCat: React.FC = () => {\r\n  const { isShowCat } = useContext(ShowCatContext);\r\n\r\n  return (\r\n    <>\r\n      {isShowCat ? (\r\n        <aside\r\n          className={`absolute right-0 bottom-0\r\n          w-[240px] h-[161px]\r\n          dark:opacity-65\r\n          `}\r\n        >\r\n          <img\r\n            src={meowing}\r\n            alt=\"meow meow meow\"\r\n          />\r\n        </aside>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(MeowingCat);\r\n","import { useLocation } from 'react-router-dom';\r\nimport AuthForm from './form';\r\nimport { useRef } from 'react';\r\nimport { FormikProps } from 'formik';\r\nimport {\r\n  TAuthConditional,\r\n  TAuthFormValues,\r\n  TAuthRegFormValues,\r\n} from './form/type';\r\nimport MeowingCat from 'components/meowingCat';\r\n\r\nconst PageAuthorization: React.FC = () => {\r\n  const { pathname: path } = useLocation();\r\n  const formRef =\r\n    useRef<FormikProps<TAuthConditional<TAuthFormValues | TAuthRegFormValues>>>(\r\n      null\r\n    );\r\n\r\n  return (\r\n    <section className=\"h-full relative\">\r\n      <AuthForm\r\n        path={path}\r\n        ref={formRef}\r\n      />\r\n      <MeowingCat />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PageAuthorization;\r\n"],"names":["_ref","path","errors","touched","useFormikContext","user","useAppSelector","state","styleField","fields","field","_jsxs","Fragment","children","_jsx","htmlFor","id","className","name","Field","type","toLowerCase","includes","_Fragment","AUTH_FORM_FIELDS","map","isLogIn","regex","YUP_VALIDATION_LOGIN","login","Yup","required","min","max","matches","password","YUP_VALIDATION_SIGNUP","repeatPassword","oneOf","style","func","size","onClick","undefined","setIsModal","info","navigate","useNavigate","child","childPStyle","childSpanStyle","Modal","Button","onClose","forwardRef","ref","dispatch","useAppDispatch","users","isModal","useState","isModalInfo","setIsModalInfo","initialValues","validationSchema","shape","Formik","innerRef","onSubmit","values","actions","some","u","newUser","setActiveUser","addUser","resetForm","existingUser","find","Form","disabled","FormFields","ShowInfo","MeowingCat","isShowCat","useContext","ShowCatContext","src","meowing","alt","React","PageAuthorization","pathname","useLocation","formRef","useRef","AuthForm"],"sourceRoot":""}